IMM 0x0000
LDI R21, 0x000A

#Sprite einfugen
CP R31, R30
BRE Sprite_einfugen
Sprite_eingefugt:
IMM 0x0000
LDI R30, 0x0000

New_Quadrat:

CP R21, R22
BRL End

#Flushen
CP R31, R23
BRE Flush
Flush_End:
IMM 0x0000
LDI R23, 0x0000

#Alle Register clearen
CP R31, R24
BRE Clearen
Clearen_End:
IMM 0x0000
LDI R24, 0x0000

#Generate_X R19
#CP R31, R25
#BRE Generate_X
JMP Generate_X
Generate_X_End:

#Alle Register clearen
CP R31, R26
BRE Clearen2
Clearen_End2:
IMM 0x0000
LDI R26, 0x0000

#Generate_Y R20
#CP R31, R27
#BRE Generate_Y
JMP Generate_Y
Generate_Y_End:

#Alle Register clearen
CP R31, R28
BRE Clearen3
Clearen_End3:
IMM 0x0000
LDI R28, 0x0000

#Generate_Quadrat
CP R31, R29
BRE Generate_Quadrat
Generate_Quadrat_End:
IMM 0x0000
LDI R29, 0x0000

#Alle Register clearen
CP R31, R30
BRE Clearen4
Clearen_End4:
IMM 0x0000
LDI R30, 0x0000


STATE_01:
#Hier kommt Kollisionserkennung
JMP REAL_STATE_01


#Nach State_01
JMP STATE_10

Kollision:

INC R22

CP R21, R22
BRG New_Quadrat
End:
NOP



Flush:
IMM 0x0000
LDI R0, 0x2
LDI R1, 0x0007
ST R0, R1

IMM 0x0000
LDI R0, 0x4
IMM 0x0000
LDI R1, 0x0000

STV R0, R1

IMM 0x0000
LDI R23, 0x0001
CP R31, R23
BRNE Flush_End
IMM 0xFFF
LDI R23, 0x0


Clearen:
CLR R0
CLR R1
CLR R2
CLR R3
CLR R4
CLR R5
CLR R6
CLR R7
CLR R8
CLR R9
CLR R10
CLR R11
CLR R12
CLR R13
CLR R14
CLR R15
CLR R16



IMM 0x0000
LDI R24, 0x0001
CP R31, R24
BRNE Clearen_End
IMM 0xFFF
LDI R24, 0x0



Generate_X:

CP R31, R25
BRNE vorheriges_x
LDI R0, 0x000E
IMM 0x0000
MOV R1, R0
vorheriges_x:

CP R31, R25
BRE kein_R19_holen
MOV R1, R19
kein_R19_holen:

LDI R7, 0d150

Nochmal:
LSR R1

MOV R3, R1
MOV R4, R1
MOV R5, R1
 
IMM 0x0000
LDI R10, 0b0000000000000001
IMM 0x0000
LDI R11, 0b00000000001000000
IMM 0x0000
LDI R12, 0b0000001000000000

AND R3, R10
AND R4, R11
AND R5, R12

IMM 0x0000
LDI R6, 0x0000
CP R3, R6
BRE 0x3
CLR R3
LDI R3, 0x0001

IMM 0x0000
LDI R6, 0x0000
CP R4, R6
BRE 0x3
CLR R4
LDI R4, 0x0001

IMM 0x0000
LDI R6, 0x0000
CP R5, R6
BRE 0x3
CLR R5
LDI R5, 0x0001

XOR R4, R3
XOR R5, R4
MOV R2, R1

IMM 0X0000
LDI R6, 0x0000
CP R5, R6
BRE 0x5
CLR R5
LDI R5, 0x8000
OR R2, R5

MOV R1, R2

CP R1, R7
BRL JMP_MARK
JMP Nochmal
JMP_MARK:
MOV R19, R1

IMM 0x0000
LDI R25, 0x0001
CP R31, R25
BRNE Generate_X_End
IMM 0xFFF
LDI R25, 0x0


Clearen2:
CLR R0
CLR R1
CLR R2
CLR R3
CLR R4
CLR R5
CLR R6
CLR R7
CLR R8
CLR R9
CLR R10
CLR R11
CLR R12
CLR R13
CLR R14
CLR R15
CLR R16



IMM 0x0000
LDI R26, 0x0001
CP R31, R26
BRNE Clearen_End2
IMM 0xFFF
LDI R26, 0x0

Generate_Y:

CP R31, R27
BRNE vorheriges_y
LDI R0, 0x000A
IMM 0x0000
MOV R1, R0
vorheriges_y:

CP R31, R27
BRE kein_R20_holen
MOV R1, R20
kein_R20_holen:

LDI R7, 0d110

Nochmal2:
LSR R1

MOV R3, R1
MOV R4, R1
MOV R5, R1
 
IMM 0x0000
LDI R10, 0b0000000000000001
IMM 0x0000
LDI R11, 0b00000000001000000
IMM 0x0000
LDI R12, 0b0000001000000000

AND R3, R10
AND R4, R11
AND R5, R12

IMM 0x0000
LDI R6, 0x0000
CP R3, R6
BRE 0x3
CLR R3
LDI R3, 0x0001

IMM 0x0000
LDI R6, 0x0000
CP R4, R6
BRE 0x3
CLR R4
LDI R4, 0x0001

IMM 0x0000
LDI R6, 0x0000
CP R5, R6
BRE 0x3
CLR R5
LDI R5, 0x0001

XOR R4, R3
XOR R5, R4
MOV R2, R1

IMM 0X0000
LDI R6, 0x0000
CP R5, R6
BRE 0x5
CLR R5
LDI R5, 0x8000
OR R2, R5

MOV R1, R2

CP R1, R7
BRL JMP_MARK2
JMP Nochmal2
JMP_MARK2:
MOV R20, R1

IMM 0x0000
LDI R27, 0x0001
CP R31, R27
BRNE Generate_Y_End
IMM 0xFFF
LDI R27, 0x0

Clearen3:
CLR R0
CLR R1
CLR R2
CLR R3
CLR R4
CLR R5
CLR R6
CLR R7
CLR R8
CLR R9
CLR R10
CLR R11
CLR R12
CLR R13
CLR R14
CLR R15
CLR R16



IMM 0x0000
LDI R28, 0x0001
CP R31, R28
BRNE Clearen_End3
IMM 0xFFF
LDI R28, 0x0


Generate_Quadrat:


IMM 0x000
LDI R0, 0x1
LDI R1, 0x7
ST R0, R1

LDI R10, 0x000A

MOV R1, R19
MOV R2, R20
MOV R13, R1
MOV R15, R1
MOV R14, R2
MOV R16, R2

Zeilen_Schleife:
INC R8
CLR R3

SHIFT_X_COORD:

LSL R1
INC R3

IMM 0x000
LDI R4, 0x8
CP R3, R4
BRNE SHIFT_X_COORD

MOV R12, R1 
OR R12, R2

IMM 0x000
LDI R5, 0x1
STV R5,R12

INC R13
MOV R1, R13
CP R10, R8
BRG Zeilen_Schleife

INC R2
INC R9
MOV R13, R15
MOV R1, R13
CLR R8
CP R10, R9
BRG Zeilen_Schleife

IMM 0x0000
LDI R29, 0x0001
CP R31, R29
BRNE Generate_Quadrat_End
IMM 0xFFF
LDI R29, 0x0


Clearen4:
CLR R0
CLR R1
CLR R2
CLR R3
CLR R4
CLR R5
CLR R6
CLR R7
CLR R8
CLR R9
CLR R10
CLR R11
CLR R12
CLR R13
CLR R14
CLR R15
CLR R16



IMM 0x0000
LDI R30, 0x0001
CP R31, R30
BRNE Clearen_End4
IMM 0xFFF
LDI R30, 0x0

Sprite_einfugen:

IMM 0b11111111
LDI R3, 0b11111111
LDI R0, 0xFFF0
ST R3, R0

IMM 0b11111111
LDI R3, 0b11111111
LDI R0, 0xFFF1
ST R3, R0

IMM 0b11111111
LDI R3, 0b11111111
LDI R0, 0xFFF2
ST R3, R0

IMM 0b11111111
LDI R3, 0b11111111
LDI R0, 0xFFF3
ST R3, R0

IMM 0b11111111
LDI R3, 0b11111111
LDI R0, 0xFFF4
ST R3, R0

IMM 0b11111111
LDI R3, 0b11111111
LDI R0, 0xFFF5
ST R3, R0

IMM 0b11111111
LDI R3, 0b11111111
LDI R0, 0xFFF6
ST R3, R0

IMM 0b11111111
LDI R3, 0b11111111
LDI R0, 0xFFF7
ST R3, R0


IMM 0x00000000
LDI R3, 0x00000000
LDI R0, 0xFFF8
ST R3, R0

IMM 0x00000000
LDI R3, 0x00000000
LDI R0, 0xFFF9
ST R3, R0

IMM 0x0000
LDI R30, 0x0001
CP R31, R30
BRNE Sprite_eingefugt
IMM 0xFFF
LDI R30, 0x0



STATE_10:
IMM 0x000
LDI R0, 0x3
LDI R2, 0x1
LDI R4, 0xFFF8
LDI R5, 0xFFF9
CLR R6

# Polling Abfrage der Taster 
BUTTON_LOOP:
LD  R1,R0
LD  R3,R2
XOR R3,R1
CP  R3,R6
BRE BUTTON_LOOP

# Analyse der Taster BT_0 - BT_1
ST  R1, R2
IMM 0x000
LDI R3,0x1
CP R1,R3 
BRE BT_0
IMM 0x000
LDI R3,0x2
CP R1,R3 
BRE BT_1
IMM 0x000
LDI R3,0x4
CP R1,R3 
BRE BT_2
IMM 0x000
LDI R3,0x8
CP R1,R3 
BRE BT_3
jmp BUTTON_LOOP

# Routine für Button BT_0
BT_0:
LD R3,R4
INC R3
ST R3,R4
INC R17
jmp STATE_01

# Routine für Button BT_1
BT_1:
LD R3,R4
DEC R3
ST R3,R4
DEC R17
jmp STATE_01

# Routine für Button BT_2
BT_2:
LD R3,R5
INC R3
ST R3,R5
INC R18
jmp STATE_01

# Routine für Button BT_3
BT_3:
LD R3,R5
DEC R3
ST R3,R5
DEC R18
jmp STATE_01

REAL_STATE_01:
#HIER CODE KOLLISIONERKENNUNG
DEC R17
DEC R18
CP R17, R19
BRNE Keine_Kollision_x
CP R18, R20
BRNE Keine_Kollision_y


INC R17
INC R18
JMP Kollision


Keine_Kollision_x:
INC R17
INC R18
JMP STATE_10
Keine_Kollision_y:
INC R17
INC R18
JMP STATE_10